const {
  EmbedBuilder,
  ActionRowBuilder,
  ButtonStyle,
  ButtonBuilder,
} = require("discord.js");

const SUPPORT_CHANNEL_LINK =
  "https://discord.com/channels/688866481689329773/1018802206536896532";
const GRADUATION_CAP_THUMBNAIL =
  "https://cdn.discordapp.com/attachments/814908646138970122/1019303726965608448/Sans_titre.png";

const SUPPORT_BUTTON = new ButtonBuilder()
  .setStyle(ButtonStyle.Link)
  .setLabel("Support")
  .setEmoji("üìû")
  .setURL(SUPPORT_CHANNEL_LINK);

module.exports = {
  welcomeEmbed: () => {
    const embed = new EmbedBuilder()
      .setTitle("üéì | Bienvenue en coaching !")
      .setThumbnail(GRADUATION_CAP_THUMBNAIL)
      .setDescription(
        "Bonjour !\n Vous avez r√©serv√© un coaching ?\n Vous √™tes au bon endroit !\n Cliquez sur le bouton '**Commencer Coaching**' pour commencer. En cas de question ou probl√®me, cliquez sur le bouton **üìû Support**"
      )
      .setColor("Purple")
      .setFooter({ text: "cril.langues@iut-tlse3.fr" });

    const row = new ActionRowBuilder();

    const start_button = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setLabel("Commencer Coaching")
      .setEmoji("üéì")
      .setCustomId("coaching:start");

    row.addComponents(start_button, SUPPORT_BUTTON);

    return { embeds: [embed], components: [row], ephemeral: true };
  },

  coolDownEmbed: () => {
    const embed = new EmbedBuilder()
      .setTitle("üïí | Veuillez patienter")
      .setDescription(
        "Hey Slow Down !\n Vous avez d√©j√† cliqu√© sur ce bouton il y a peu.\n Si vous avez besoin d'aide rendez-vous dans le salon **üìû Support**"
      )
      .setImage(
        "https://tenor.com/view/proceed-with-caution-stop-sign-slow-resume-flagger-gif-25547481"
      );

    const row = new ActionRowBuilder();
    row.addComponents(SUPPORT_BUTTON);

    return { embeds: [embed], components: [row], ephemeral: true };
  },

  coachingChoice: () => {
    const embed = new EmbedBuilder()
      .setTitle("ü™∂ | De quelle s√©ance de coaching s'agit-il ?")
      .addFields(
        {
          name: "üê§ | 1ere s√©ance",
          value: "Premi√®re s√©ance de coaching",
        },
        {
          name: "üêî | 2√®me s√©ance 2",
          value: "Deuxi√®me s√©ance de coaching",
        },
        {
          name: "ü¶Ö | 3√®me s√©ance",
          value: "Troisi√®me s√©ance de coaching",
        },
        {
          name: "üõ©Ô∏è | 4√®me s√©ance ou plus",
          value: "Quatri√®me s√©ance de coaching ou plus",
        }
      )
      .setFooter({
        text: "üñ±Ô∏è | Cliquez sur le bouton correspondant √† votre s√©ance de coaching",
      })
      .setColor("Aqua");

    const firstRow = new ActionRowBuilder();
    const secondRow = new ActionRowBuilder();

    let ButtonFirst = new ButtonBuilder()
      .setStyle(ButtonStyle.Secondary)
      .setLabel("Premier Coaching")
      .setEmoji("üê§")
      .setCustomId("coaching:first");

    let ButtonSecond = new ButtonBuilder()
      .setStyle(ButtonStyle.Secondary)
      .setLabel("Second Coaching")
      .setEmoji("üêî")
      .setCustomId("coaching:second");

    let ButtonThird = new ButtonBuilder()
      .setStyle(ButtonStyle.Secondary)
      .setLabel("Troisi√®me Coaching")
      .setEmoji("ü¶Ö")
      .setCustomId("coaching:third");

    let ButtonPlus = new ButtonBuilder()
      .setStyle(ButtonStyle.Secondary)
      .setLabel("Plus de 3 coachings")
      .setEmoji("üõ©Ô∏è")
      .setCustomId("coaching:plus");

    firstRow.addComponents(ButtonFirst, ButtonSecond);
    secondRow.addComponents(ButtonThird, ButtonPlus);

    return {
      embeds: [embed],
      components: [firstRow, secondRow],
      ephemeral: true,
    };
  },

  verificationCoaching: () => {
    const embed = new EmbedBuilder()
      .setTitle("‚ÅâÔ∏è | R√©servation Introuvable")
      .setDescription(
        "Il semble que vous n'√™tes pas sur la liste des coaching aujourd'hui.\n Merci de v√©rifier la **date** et l'**heure** de votre r√©servation sur [R√©sacril](http://resacril.iut-tlse3.fr/).\n\n Si vous √™tes __**s√ªr**__ d'avoir un coaching maintenant, cliquez sur **OUI**. Si non, cliquez sur **NON**."
      )
      .setColor("Orange");

    const row = new ActionRowBuilder();

    const yes_button = new ButtonBuilder()
      .setStyle(ButtonStyle.Success)
      .setLabel("Oui")
      .setEmoji("‚úÖ")
      .setCustomId("coaching:yes");

    const no_button = new ButtonBuilder()
      .setStyle(ButtonStyle.Danger)
      .setLabel("Non")
      .setEmoji("‚ùå")
      .setCustomId("coaching:no");

    row.addComponents(yes_button, no_button, SUPPORT_BUTTON);

    return { embeds: [embed], components: [row], ephemeral: true };
  },

  debAFaireEmbed: () => {
    const embed = new EmbedBuilder()
      .setTitle("‚ÅâÔ∏è | Fiche D√©but de parcours introuvable")
      .setThumbnail(GRADUATION_CAP_THUMBNAIL)
      .setDescription(
        "Nous n'avons pas trouv√© votre fiche d√©but de parcours remplie.\n Il est demand√© dans le mail de confirmation et de rappel de remplir cette fiche la veille de votre coaching.\n Aviez-vous rempli cette fiche? Si oui cliquez sur **OUI**. Si non, cliquez sur **NON**."
      )
      .setColor("DarkRed");

    const row = new ActionRowBuilder();

    let yes_button = new ButtonBuilder()
      .setStyle(ButtonStyle.Success)
      .setLabel("Oui")
      .setEmoji("‚úÖ")
      .setCustomId("coaching:yes");

    let no_button = new ButtonBuilder()
      .setStyle(ButtonStyle.Danger)
      .setLabel("Non")
      .setEmoji("‚ùå")
      .setCustomId("coaching:no");

    row.addComponents(yes_button, no_button, SUPPORT_BUTTON);

    return { embeds: [embed], components: [row], ephemeral: true };
  },

  sorryEmbed: () => {
    const embed = new EmbedBuilder()
      .setTitle("üö´ | D√©sol√© ...")
      .setColor("Red")
      .setDescription(
        "Nous ne pouvons pas vous accepter. Merci de r√©server une autre s√©ance sur [R√©sacril](http://resacril.iut-tlse3.fr/) et d'√©crire un mail √† **__cril.langues@iut-tlse3.fr__**\n Cliquez sur le bouton Support pour parler directement √† une responsable."
      );

    const row = new ActionRowBuilder();

    row.addComponents(SUPPORT_BUTTON);

    return { embeds: [embed], components: [row], ephemeral: true };
  },

  ficheAFaireEmbed: () => {
    const embed = new EmbedBuilder()
      .setTitle("‚ÅâÔ∏è | Derni√®re fiche coaching introuvable")
      .setThumbnail(GRADUATION_CAP_THUMBNAIL)
      .setDescription(
        "Nous n'avons pas trouv√© votre derni√®re fiche de coaching.\n Vous deviez remplir cette fiche au fur et √† mesure de votre s√©ance.\n Aviez-vous rempli cette fiche?\n Si oui cliquez sur **OUI**. Si non, cliquez sur **NON**."
      )
      .setColor("DarkRed");

    const row = new ActionRowBuilder();

    let yes_button = new ButtonBuilder()
      .setStyle(ButtonStyle.Success)
      .setLabel("Oui")
      .setEmoji("‚úÖ")
      .setCustomId("coaching:yes");

    let no_button = new ButtonBuilder()
      .setStyle(ButtonStyle.Danger)
      .setLabel("Non")
      .setEmoji("‚ùå")
      .setCustomId("coaching:no");

    row.addComponents(yes_button, no_button, SUPPORT_BUTTON);

    return { embeds: [embed], components: [row], ephemeral: true };
  },

  channelUnlockedEmbedIn: (channelId) => {
    const embed = new EmbedBuilder()
      .setTitle("üèÅ | Channel d√©bloqu√© !")
      .setDescription(
        `Parfait!\n Rendez-vous dans le channel <#${channelId}> et **__dites bonjour__**.`
      )
      .setColor("Green");

    return { embeds: [embed], ephemeral: true };
  },

  channelUnlockedEmbedOut: (userId) => {
    const embed = new EmbedBuilder()
      .setTitle("üéì | Channel d√©bloqu√© !")
      .setThumbnail(GRADUATION_CAP_THUMBNAIL)
      .setDescription(
        `Bienvenue dans le channel de guidage.\n
        Commencez par dire **bonjour**, une de nos coach vous r√©pondra. 
        `
      )
      .setColor("Green");

    return {
      content: `<@${userId}>`,
      embeds: [embed],
      ephemeral: true,
      allowedMentions: { users: [userId] },
    };
  },

  lateEmbed: () => {
    const embed = new EmbedBuilder()
      .setTitle("Retard")
      .setDescription(
        "Vous √™tes en retard de plus de 15 min pour votre coaching, nous ne pouvons pas vous accepter. Merci d'√©crire √† cril.langues@iut-tlse3.fr pour justifier votre absence. Cliquez sur le bouton Support pour parler √† une Responsable."
      )
      .setFooter({
        text: "Vous √™tes autoris√© de maximum 15 minutes de retard !",
      })
      .setColor("LightGrey");

    const row = new ActionRowBuilder();

    row.addComponents(SUPPORT_BUTTON);

    return { embeds: [embed], components: [row], ephemeral: true };
  },

  errorEmbed: () => {
    const embed = new EmbedBuilder()
      .setTitle("ü§ñ | Une erreur est survenue !")
      .setDescription(
        "Une erreur est survenue. Merci de contacter un Responsable √† l'aide du support !"
      )
      .setColor("Red");

    const row = new ActionRowBuilder();

    row.addComponents(SUPPORT_BUTTON);

    return { embeds: [embed], components: [row], ephemeral: true };
  },

  tryAgainEmbed: () => {
    const embed = new EmbedBuilder()
      .setTitle("‚è∞ | A bient√¥t !")
      .setDescription(
        "Merci de revenir le jour de votre r√©servation.\n Cliquez ici pour aller sur r√©sacril et r√©server. [lien vers r√©sacril](http://resacril.iut-tlse3.fr/)"
      )
      .setColor("DarkOrange");

    const row = new ActionRowBuilder();

    row.addComponents(SUPPORT_BUTTON);

    return { embeds: [embed], components: [row], ephemeral: true };
  },
};
