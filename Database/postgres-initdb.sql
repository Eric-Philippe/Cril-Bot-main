CREATE TABLE CURRENT_SPREADSHEETS (
    ID VARCHAR(50),
    ENTRY_DATE TIMESTAMP NOT NULL,
    PRIMARY KEY (ID)
);

CREATE TABLE INSCRIPTIONS_ATELIER (
    ID SERIAL PRIMARY KEY,
    SLOT TIMESTAMP NOT NULL,
    LIEU VARCHAR(255),
    ACTIVITY VARCHAR(255) NOT NULL,
    ACTIVITY_LEVEL VARCHAR(255) NOT NULL,
    LANGUE VARCHAR(255) NOT NULL,
    LASTNAME VARCHAR(255) NOT NULL,
    FIRSTNAME VARCHAR(255) NOT NULL,
    ANG_LEVEL VARCHAR(255),
    ESP_LEVEL VARCHAR(255),
    OBSERVATIONS VARCHAR(4000),
    GROUPE VARCHAR(255)
);

CREATE TABLE INSCRIPTIONS_COACHING (
    ID SERIAL PRIMARY KEY,
    SLOT TIMESTAMP NOT NULL,
    LIEU VARCHAR(255),
    LANGUE VARCHAR(255) NOT NULL,
    LASTNAME VARCHAR(255) NOT NULL,
    FIRSTNAME VARCHAR(255) NOT NULL,
    OBSERVATIONS VARCHAR(4000),
    GROUPE VARCHAR(255),
    COMMENT_COACHING VARCHAR(255)
);

CREATE TABLE canvas_data (
    id SERIAL PRIMARY KEY,
    canvas_json JSON,  -- The JSON column for canvas data
    width INTEGER,      -- Width of the canvas
    height INTEGER,     -- Height of the canvas
    created_at TIMESTAMP DEFAULT NOW() -- Creation timestamp
);

CREATE TABLE logs_canvas (
    id SERIAL PRIMARY KEY,
    user_id VARCHAR(100),   -- Use appropriate data type for the user ID
    action_date TIMESTAMP,  -- Date and time of the action
    color VARCHAR(50),      -- Use appropriate data type for color representation
    x INTEGER,              -- x-coordinate of the pixel placement
    y INTEGER               -- y-coordinate of the pixel placement
);

-- LOGS_ERROR
CREATE TABLE LOGS_ERROR (
    ID SERIAL PRIMARY KEY,
    ENTRY_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    ERROR_TYPE VARCHAR(255) NOT NULL,
    STACK_TRACE TEXT NOT NULL,
    MSG VARCHAR(4000) NOT NULL
);

-- LOGS_GENERAL
CREATE TABLE LOGS_GENERAL (
    ID SERIAL PRIMARY KEY,
    ENTRY_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    TYPE VARCHAR(255) NOT NULL,
    MSG VARCHAR(4000) NOT NULL
);

-- COACHING INTERNAL
CREATE TABLE LOGS_COACHING_I (
    ID SERIAL PRIMARY KEY,
    ENTRY_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    USER_ID VARCHAR(20) NOT NULL CHECK (LENGTH(USER_ID) > 17),
    ACTION VARCHAR(255) NOT NULL,
    MSG VARCHAR(4000) NOT NULL
);

-- LOGS_ENTRY
CREATE TABLE LOGS_ENTRY (
    ID SERIAL PRIMARY KEY,
    ENTRY_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    USER_ID VARCHAR(20) NOT NULL CHECK (LENGTH(USER_ID) > 17),
    MSG VARCHAR(4000) NOT NULL
);

-- LOGS_COACHING
CREATE TABLE LOGS_COACHING (
    ID SERIAL PRIMARY KEY,
    ENTRY_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    USER_ID VARCHAR(20) NOT NULL CHECK (LENGTH(USER_ID) > 17),
    MSG VARCHAR(4000) NOT NULL
);

CREATE TABLE POLL (
   msgId VARCHAR(50),
   userid VARCHAR(50),
   answer INT NOT NULL,
   PRIMARY KEY (msgId, userid)
);

CREATE TABLE TOSS_STATE (
   msgId VARCHAR(50),
   etat VARCHAR(50),
   PRIMARY KEY (msgId)
)

CREATE TABLE TOSS_PARTICIPANTS (
   msgId VARCHAR(50),
   userid VARCHAR(50),
   FOREIGN KEY (msgId) REFERENCES TOSS_STATE(msgId),
   PRIMARY KEY (msgId, userid)
)